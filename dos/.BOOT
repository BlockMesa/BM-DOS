--hidden programs stuff originally by someone else
--i forget who originally made it and i cant find the post, sorry :(

-- #### Preperation
local path = bios.getBootedDrive()

term.clear()
term.setCursorPos(1,1)
term.write("Starting BM-DOS...")
term.setCursorPos(1,3)
if not fs.find(path) then
	print("ERROR LOADING BOOT DEVICE!") --how does this happen
	while true do os.sleep() end
end


-- #### Vars
local hiddenPrograms = {"rom", "disk", "startup.lua", ".BOOT",".settings"}
local fake = {}
local real = {}

-- #### "Local" functions
local function shouldBeHidden(path)
	for i=1, #hiddenPrograms do
		if string.lower(path) == string.lower(hiddenPrograms[i]) then
			return true
		end
	end
	return false
end

-- #### Tweaking compromising functions
real.error = _G.printError
function fakeError(text)
	if type(string.find(text, "startup.lua:")) == "number" then
		return false
	else
		real.error(text)
	end
end
_G.printError = fakeError

real.find = fs.find
local function fakeFind(path)
	if string.lower(path) == "startup" then
		path = userStartupPath
	end
	if shouldBeHidden(path) == true then
		return nil
	end

	list = real.find(path)
	for i=1,#list do
		for j=1, #hiddenPrograms do
			if type(list[i]) == "string" then
				if string.lower(list[i]) == string.lower(hiddenPrograms[j]) then
					table.remove(list, i)
				end
			end
		end
	end
	for i=1,#list do
		if list[i] == userStartupPath then
			list[i] = "startup"
		end
	end
	return list
end
_G.fs.find = fakeFind

real.list = fs.list
local function fakeList(path)
	list = real.list(path)
	for i=1,#list do
		for j=1, #hiddenPrograms do
			if type(list[i]) == "string" then
				if string.lower(list[i]) == string.lower(hiddenPrograms[j]) then
					table.remove(list, i)
				end
			end
		end
	end
	for i=1,#list do
		if list[i] == "startup" then
			table.remove(list, i)
		end
	end
	for i=1,#list do
		if list[i] == userStartupPath then
			list[i] = "startup"
		end
	end	
	return list
end
_G.fs.list = fakeList

real.exists = fs.exists
local function fakeExists(path)
	return real.exists(path)
end
_G.fs.exists = fakeExists

real.ioOpen = io.open
local function fakeIoOpen(path)
	if shouldBeHidden(path) == true then
		return nil
	end
	if string.lower(path) == "command.com" then
		return nil
	end	
	return real.ioOpen(path)
end
_G.io.open = fakeIoOpen


real.makeDir = fs.makeDir

real.delete = fs.delete
local fakeDelete = function(path)
	if shouldBeHidden(path) == true then
		return nil
	end
	if string.lower(path) == "command.com" then
		return nil
	end	
	return real.delete(path)
end
_G.fs.makeDir = function(...) return end
--_G.fs.isDir = function(...) return false end


real.open = fs.open
local function fakeOpen(path, mode)
	if string.lower(path) == "command.com" then
		return nil
	end	
	return real.open(path, mode)
end
_G.fs.open = fakeOpen

real.isReadOnly = fs.isReadOnly
local function fakeIsReadOnly(path)
	if shouldBeHidden(path) == true then
		return nil
	end
	if string.lower(path) == "command.com" then
		return true
	end
	return real.isReadOnly(path)
end
_G.fs.isReadOnly = fakeIsReadOnly

real.getSize = fs.getSize
local function fakeGetSize(path)
	if shouldBeHidden(path) == true then
		return nil
	end
	return real.getSize(path)
end
_G.fs.getSize = fakeGetSize

real.move = fs.move
local function fakeMove(fromPath, toPath)
	if shouldBeHidden(fromPath) == true or shouldBeHidden(toPath) == true then
		return nil
	end
	if string.lower(fromPath) == "command.com" then
		return nil
	end
	
	return real.move(fromPath, toPath)
end
_G.fs.move = fakeMove

real.copy = fs.copy
local function fakeCopy(fromPath, toPath)
	if shouldBeHidden(fromPath) == true or shouldBeHidden(toPath) == true then
		return nil
	end
	
	return real.copy(fromPath, toPath)
end
_G.fs.copy = fakeCopy

--modify the env
shell.setDir(path)
shell.dir = function(...) return path end
shell.openTab = nil
shell.switchTab = nil



if real.exists(bios.getBootedDrive().."COMMAND.COM") then
	local success, response = pcall(os.run,{['shell']=shell},bios.getBootedDrive().."COMMAND.COM")
	if not success then
		while true do os.sleep() end
	end
else
	while true do
		print("Bad or missing Command Interpretor\nEnter correct name of Command Interpreter (eg, /COMMAND.COM)")
		term.write(bios.getDrive().."> ")
		local thing = read()
		local success, response = pcall(os.run,{['shell']=shell},thing)
	end
end
